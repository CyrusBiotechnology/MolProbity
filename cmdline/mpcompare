#!/usr/bin/env php
<?php # (jEdit options) :folding=explicit:collapseFolds=1:
/*****************************************************************************
*
*  MolProbity Compare - cmdline version
*
*****************************************************************************/
// EVERY *top-level* page must start this way:
// 1. Define it's relationship to the root of the MolProbity installation.
// Pages in subdirectories of lib/ or public_html/ will need more "/.." 's.
  if(!defined('MP_BASE_DIR')) define('MP_BASE_DIR', realpath(dirname(__FILE__).'/..'));
// 2. Include core functionality - defines constants, etc.
  require_once(MP_BASE_DIR.'/lib/core.php');
  require_once(MP_BASE_DIR.'/lib/horizontal_chart_func.php');
// 3. Restore session data. If you don't want to access the session
// data for some reason, you must call mpInitEnvirons() instead.
  mpInitEnvirons();       // use std PATH, etc.
  //mpStartSession(true);   // create session dir
// 5. Set up reasonable values to emulate CLI behavior if we're CGI
  set_time_limit(0); // don't want to bail after 30 sec!
// 6. Unlimited memory for processing large files
  ini_set('memory_limit', -1);


// First argument is the name of this script...
if(is_array($_SERVER['argv'])) foreach(array_slice($_SERVER['argv'], 1) as $arg) {
  $pdb_file_list[] = $arg;
}

// ensure that the user provided two args
if(count($pdb_file_list) != 2)
  die("Must provide exactly 2 PDB files on the command line!\n");

// ensure that the two args are files
$confirmed_pdb_files = array();
foreach($pdb_file_list as $infile) {
  if(is_file($infile)) $confirmed_pdb_files[] = $infile;
  else die("'$infile' is not a file. Please provide only PDB files.");
}

if(count($confirmed_pdb_files) == 2) {
  $pdb1 = $confirmed_pdb_files[0];
  $pdb2 = $confirmed_pdb_files[1];
}
// run residue analysis
$res_ana = array();
$cmd = "/Users/bradleyhintze/Sites/MPcompare/cmdline/residue-analysis $pdb1";
$out1 = shell_exec($cmd);
$res_ana[] = $out1;
$cmd = "/Users/bradleyhintze/Sites/MPcompare/cmdline/residue-analysis $pdb2";
$out2 = shell_exec($cmd);
$res_ana[] = $out2;
$modelID1 = substr($pdb1, 0, strpos($pdb1, ".pdb"));
$modelID2 = substr($pdb2, 0, strpos($pdb2, ".pdb"));

echo "\n\n\n\n\n\n**************\n\n\n\n\n";
$mp1 = explode("\n", $res_ana[0]);
$mp2 = explode("\n", $res_ana[1]);
$mpt1 = get_res_ana_array($mp1);
$mph1 = get_mp_hierarchy($mpt1);
$mpt2 = get_res_ana_array($mp2);
$mph2 = get_mp_hierarchy($mpt2);
// this will get the sequence of ALL chains in one sequencr as we didn't
// provide a chain
$fasta = get_chain_sequences($mh1 = $mph1,  $modelID1 = $modelID1,
  $mp2 = $mph2, $modelID2 = $modelID2);
list($mph_side_by_side, $mph_diff) = get_molprobity_compare_table(
  $fasta = $fasta,
  $mph1 = $mph1, $modelID1 = $modelID1, $mph2 = $mph2,
  $modelID2 = $modelID2);

echo print_r($mph_side_by_side);
echo "\n";

// {{{ get_res_ana_array
function get_res_ana_array($mp)
{
  $is_first = true;
  $mpt = array();
  foreach($mp as $row) {
    $cols = explode(",", $row);
    if($is_first) {
      $heads = $cols;
      $is_first = false;
    } else {
      foreach($cols as $key => $value)
        $m[$heads[$key]] = $value;
      $mpt[] = $m;
    }
  }
  return $mpt;
}
// }}}

// {{{ get_mp_hierarchy
function get_mp_hierarchy($mpt) 
/**********************************************
*
*  Returns an array with residue names as keys, these keys point to an array 
*  with molprobity parameter keys, these keys ponit to an array with two keys 
*  'html and 'color. 'html' is the text from the classic multi-criterion chart.
*  If 'color' is not blank than the molprobity parameter for the given residue
*  is an outlier. I.E.:
*    $mph['A   1']['high b'] 
*      could output:
*    Array(html=>37.89, color=>)
*    
*    $mpt       from the array from residue-analysis
*    
************************************************/
{
  $mph = array();
  foreach($mpt as $params) {
    $ar = array();
    $res = $params["residue"];
    $ar["#"]["html"] = substr($res, 0, strrpos($res, " "));
    $ar["#"]["color"] = "";
    $ar["res"]["html"] = trim(substr($res, strrpos($res, " ")));
    $ar["res"]["color"] = "";
    $ar["high b"]["html"] = $params["res_high_B"];
    $ar["high b"]["color"] = "";
    if($params["worst_clash"] == "") $clash = "-";
    else $clash = $params["worst_clash"];
    $ar["clash &gt; 0.4&aring;"]["html"] = $clash;
    if($clash != "-") $color = "#ff6699";
    else $color = "";
    $ar["clash &gt; 0.4&aring;"]["color"] = $color;
    if($params["rama_score"] == "") $rama = "-";
    else $rama = $params["rama_score"];
    $ar["ramachandran"]["html"] = $rama;
    if($params["rama_eval"] == "OUTLIER") $color = "#ff6699";
    else $color = "";
    $ar["ramachandran"]["color"] = $color;
    if($params["rotamer_score"] == "") $rot = "-";
    else $rot = $params["rotamer_score"];
    $ar["rotamer"]["html"] = $rot;
    if($params["rotamer_eval"] == "OUTLIER") $color = "#ff6699";
    else $color = "";
    $ar["rotamer"]["color"] = $color;
    if($params["CB_dev"] == "") {
      $cb = "-";
      $color = "";
    } else {
      $cb = $params["CB_dev"];
      $color = "#ff6699";
    }
    $ar["c&beta; deviation"]["html"] = $cb;
    $ar["c&beta; deviation"]["color"] = $color;
    if($params["num_length_out"] != 0) {
      $color = "#ff6699";
      $bl = $params["worst_length_sigma"];
    } else {
      $color = "";
      $bl = "-";
    }
    $ar["bond angles."]["html"] = $bl;
    $ar["bond angles."]["color"] = $color;
    if($params["num_angle_out"] != 0) {
      $color = "#ff6699";
      $ba = $params["worst_angle_sigma"];
    } else {
      $color = "";
      $ba = "-";
    }
    $ar["bond lengths."]["html"] = $ba;
    $ar["bond lengths."]["color"] = $color;
    $mph[substr($res, 0, strrpos($res, " "))] = $ar;
  }
  return $mph;
}
// }}}

?>
