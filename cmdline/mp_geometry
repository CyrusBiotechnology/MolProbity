#!/usr/bin/env php
<?php # (jEdit options) :folding=explicit:collapseFolds=1:
/*****************************************************************************
    Processes a directory full of PDB files non-recursively and outputs
    a list of all the Ramachanadran scores

 -> We assume all files already have H's added! <-

INPUTS (via $_SERVER['argv']):
    the path to a directory; *.pdb will be processed

OUTPUTS:

*****************************************************************************/
// EVERY *top-level* page must start this way:
// 1. Define it's relationship to the root of the MolProbity installation.
// Pages in subdirectories of lib/ or public_html/ will need more "/.." 's.
    if(!defined('MP_BASE_DIR')) define('MP_BASE_DIR', realpath(dirname(__FILE__).'/..'));
// 2. Include core functionality - defines constants, etc.
    require_once(MP_BASE_DIR.'/lib/core.php');
    require_once(MP_BASE_DIR.'/lib/model.php');
    require_once(MP_BASE_DIR.'/lib/analyze.php');
    require_once(MP_BASE_DIR.'/lib/visualize.php');
// 3. Restore session data. If you don't want to access the session
// data for some reason, you must call mpInitEnvirons() instead.
    mpInitEnvirons();       // use std PATH, etc.
    //mpStartSession(true);   // create session dir
// 5. Set up reasonable values to emulate CLI behavior if we're CGI
    set_time_limit(0); // don't want to bail after 30 sec!

#{{{ a_function_definition - sumary_statement_goes_here
############################################################################
/**
* Documentation for this function.
*/
//function someFunctionName() {}
#}}}########################################################################

# MAIN - the beginning of execution for this page
############################################################################
// First argument is the name of this script...
$optBonds    = true;
$optSuitname = false;
$optProtein  = true;
$optRNA      = false;
if(is_array($_SERVER['argv'])) foreach(array_slice($_SERVER['argv'], 1) as $arg)
{
    if($arg == '-bonds')           $optBonds    = true;
    elseif($arg == '-suitname')
    {
        $optSuitname = true;
        $optBonds    = false;
    }
    else $pdbFile = $arg;
}
if ($optBonds === true && $optSuitname === true) {
    die("Cannot do bonds and suitname simultaneously. Please choose one \n");
}
if(! isset($pdbFile))
    die("Must provide at least one PDB file on the command line!\n");

// runClashscore($infile, $outfile, $blength="ecloud", $clash_cutoff=-0.4)

// Loop through all PDBs in the provided directory

if(is_file($pdbFile) && endsWith($pdbFile, ".pdb"))
{
    mpStartSession(true);
    $id = addModelOrEnsemble(
        $pdbFile,
        basename($pdbFile),
        false,
        true,
        true,
        false);

    $filename = basename($pdbFile);
    $model   =& $_SESSION['models'][$id];
    $pdbfile = $_SESSION['dataDir'].'/'.MP_DIR_MODELS."/$model[pdb]";
    $rawDir  = $_SESSION['dataDir'].'/'.MP_DIR_RAWDATA;
    if(!file_exists($rawDir)) mkdir($rawDir, 0777);
    if($optBonds)
    {
        $outfile = "$rawDir/$model[prefix]bonds.data";
        runValidationReport($pdbfile, $outfile);
        $vrProteinA = loadValidationAngleReport($outfile,"protein");
        $vrProteinL = loadValidationBondReport($outfile,"protein");
        $vrRNAa = loadValidationAngleReport($outfile,"rna");
        $vrRNAl = loadValidationBondReport($outfile,"rna");
        echo "resName:type:measure:value:sigma:angCount:outCount\n";
        foreach($vrProteinA as $vr)
            echo "$vr[resName]:$vr[type]:$vr[measure]:$vr[value]:$vr[sigma]:$vr[angCount]:$vr[outCount]\n";
        foreach($vrProteinL as $vr)
            echo "$vr[resName]:$vr[type]:$vr[measure]:$vr[value]:$vr[sigma]:$vr[angCount]:$vr[outCount]\n";
        foreach($vrRNAa as $vr)
            echo "$vr[resName]:$vr[type]:$vr[measure]:$vr[value]:$vr[sigma]:$vr[angCount]:$vr[outCount]\n";
        foreach($vrRNAl as $vr)
            echo "$vr[resName]:$vr[type]:$vr[measure]:$vr[value]:$vr[sigma]:$vr[angCount]:$vr[outCount]\n";
    }
    if($optSuitname)
    {
        $outfile = "$rawDir/$model[prefix]bonds.data";
        runSuitenameReport($pdbfile, $outfile);
        $snreport = loadSuitenameReport($outfile);
        echo "resName:conformer:suiteness:bin:triage:isOutlier\n";
        foreach($snreport as $vr)
            echo "$vr[resName]:$vr[conformer]:$vr[suiteness]:$vr[bin]:$vr[triage]:$vr[isOutlier]\n";
    }

    mpDestroySession();
} else {
    die("File must have a \"pdb\" extension.\n");
}
############################################################################
// Clean up and go home
?>
